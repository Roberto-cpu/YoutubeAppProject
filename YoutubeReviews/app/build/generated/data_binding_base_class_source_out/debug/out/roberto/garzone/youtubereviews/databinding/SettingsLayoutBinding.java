// Generated by view binder compiler. Do not edit!
package roberto.garzone.youtubereviews.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.ToggleButton;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import roberto.garzone.youtubereviews.R;

public final class SettingsLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final Button settingsBackButton;

  @NonNull
  public final TextView settingsChgEmail;

  @NonNull
  public final EditText settingsChgEmailText;

  @NonNull
  public final Button settingsChgPi;

  @NonNull
  public final Button settingsChgPwd;

  @NonNull
  public final ConstraintLayout settingsLayout;

  @NonNull
  public final Button settingsSave;

  @NonNull
  public final TextView settingsTextNight;

  @NonNull
  public final ToggleButton settingsToggleButton;

  @NonNull
  public final Toolbar settingsToolbar;

  private SettingsLayoutBinding(@NonNull ConstraintLayout rootView,
      @NonNull LinearLayout linearLayout, @NonNull Button settingsBackButton,
      @NonNull TextView settingsChgEmail, @NonNull EditText settingsChgEmailText,
      @NonNull Button settingsChgPi, @NonNull Button settingsChgPwd,
      @NonNull ConstraintLayout settingsLayout, @NonNull Button settingsSave,
      @NonNull TextView settingsTextNight, @NonNull ToggleButton settingsToggleButton,
      @NonNull Toolbar settingsToolbar) {
    this.rootView = rootView;
    this.linearLayout = linearLayout;
    this.settingsBackButton = settingsBackButton;
    this.settingsChgEmail = settingsChgEmail;
    this.settingsChgEmailText = settingsChgEmailText;
    this.settingsChgPi = settingsChgPi;
    this.settingsChgPwd = settingsChgPwd;
    this.settingsLayout = settingsLayout;
    this.settingsSave = settingsSave;
    this.settingsTextNight = settingsTextNight;
    this.settingsToggleButton = settingsToggleButton;
    this.settingsToolbar = settingsToolbar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SettingsLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SettingsLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.settings_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SettingsLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.settings_back_button;
      Button settingsBackButton = ViewBindings.findChildViewById(rootView, id);
      if (settingsBackButton == null) {
        break missingId;
      }

      id = R.id.settings_chg_email;
      TextView settingsChgEmail = ViewBindings.findChildViewById(rootView, id);
      if (settingsChgEmail == null) {
        break missingId;
      }

      id = R.id.settings_chg_email_text;
      EditText settingsChgEmailText = ViewBindings.findChildViewById(rootView, id);
      if (settingsChgEmailText == null) {
        break missingId;
      }

      id = R.id.settings_chg_pi;
      Button settingsChgPi = ViewBindings.findChildViewById(rootView, id);
      if (settingsChgPi == null) {
        break missingId;
      }

      id = R.id.settings_chg_pwd;
      Button settingsChgPwd = ViewBindings.findChildViewById(rootView, id);
      if (settingsChgPwd == null) {
        break missingId;
      }

      ConstraintLayout settingsLayout = (ConstraintLayout) rootView;

      id = R.id.settings_save;
      Button settingsSave = ViewBindings.findChildViewById(rootView, id);
      if (settingsSave == null) {
        break missingId;
      }

      id = R.id.settings_text_night;
      TextView settingsTextNight = ViewBindings.findChildViewById(rootView, id);
      if (settingsTextNight == null) {
        break missingId;
      }

      id = R.id.settings_toggle_button;
      ToggleButton settingsToggleButton = ViewBindings.findChildViewById(rootView, id);
      if (settingsToggleButton == null) {
        break missingId;
      }

      id = R.id.settings_toolbar;
      Toolbar settingsToolbar = ViewBindings.findChildViewById(rootView, id);
      if (settingsToolbar == null) {
        break missingId;
      }

      return new SettingsLayoutBinding((ConstraintLayout) rootView, linearLayout,
          settingsBackButton, settingsChgEmail, settingsChgEmailText, settingsChgPi, settingsChgPwd,
          settingsLayout, settingsSave, settingsTextNight, settingsToggleButton, settingsToolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
