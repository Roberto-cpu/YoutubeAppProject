// Generated by view binder compiler. Do not edit!
package roberto.garzone.youtubereviews.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RatingBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import roberto.garzone.youtubereviews.R;

public final class NewReviewLayoutBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button newReviewBackButton;

  @NonNull
  public final EditText newReviewBandName;

  @NonNull
  public final EditText newReviewGenre;

  @NonNull
  public final ConstraintLayout newReviewLayout;

  @NonNull
  public final EditText newReviewLink;

  @NonNull
  public final Button newReviewSave;

  @NonNull
  public final EditText newReviewSongName;

  @NonNull
  public final RatingBar newReviewSongRatingBar;

  @NonNull
  public final EditText newReviewText;

  @NonNull
  public final EditText newReviewTitle;

  @NonNull
  public final Toolbar newReviewToolbar;

  @NonNull
  public final TextView newReviewView;

  private NewReviewLayoutBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button newReviewBackButton, @NonNull EditText newReviewBandName,
      @NonNull EditText newReviewGenre, @NonNull ConstraintLayout newReviewLayout,
      @NonNull EditText newReviewLink, @NonNull Button newReviewSave,
      @NonNull EditText newReviewSongName, @NonNull RatingBar newReviewSongRatingBar,
      @NonNull EditText newReviewText, @NonNull EditText newReviewTitle,
      @NonNull Toolbar newReviewToolbar, @NonNull TextView newReviewView) {
    this.rootView = rootView;
    this.newReviewBackButton = newReviewBackButton;
    this.newReviewBandName = newReviewBandName;
    this.newReviewGenre = newReviewGenre;
    this.newReviewLayout = newReviewLayout;
    this.newReviewLink = newReviewLink;
    this.newReviewSave = newReviewSave;
    this.newReviewSongName = newReviewSongName;
    this.newReviewSongRatingBar = newReviewSongRatingBar;
    this.newReviewText = newReviewText;
    this.newReviewTitle = newReviewTitle;
    this.newReviewToolbar = newReviewToolbar;
    this.newReviewView = newReviewView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static NewReviewLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static NewReviewLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.new_review_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static NewReviewLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.new_review_back_button;
      Button newReviewBackButton = ViewBindings.findChildViewById(rootView, id);
      if (newReviewBackButton == null) {
        break missingId;
      }

      id = R.id.new_review_band_name;
      EditText newReviewBandName = ViewBindings.findChildViewById(rootView, id);
      if (newReviewBandName == null) {
        break missingId;
      }

      id = R.id.new_review_genre;
      EditText newReviewGenre = ViewBindings.findChildViewById(rootView, id);
      if (newReviewGenre == null) {
        break missingId;
      }

      ConstraintLayout newReviewLayout = (ConstraintLayout) rootView;

      id = R.id.new_review_link;
      EditText newReviewLink = ViewBindings.findChildViewById(rootView, id);
      if (newReviewLink == null) {
        break missingId;
      }

      id = R.id.new_review_save;
      Button newReviewSave = ViewBindings.findChildViewById(rootView, id);
      if (newReviewSave == null) {
        break missingId;
      }

      id = R.id.new_review_song_name;
      EditText newReviewSongName = ViewBindings.findChildViewById(rootView, id);
      if (newReviewSongName == null) {
        break missingId;
      }

      id = R.id.new_review_song_ratingBar;
      RatingBar newReviewSongRatingBar = ViewBindings.findChildViewById(rootView, id);
      if (newReviewSongRatingBar == null) {
        break missingId;
      }

      id = R.id.new_review_text;
      EditText newReviewText = ViewBindings.findChildViewById(rootView, id);
      if (newReviewText == null) {
        break missingId;
      }

      id = R.id.new_review_title;
      EditText newReviewTitle = ViewBindings.findChildViewById(rootView, id);
      if (newReviewTitle == null) {
        break missingId;
      }

      id = R.id.new_review_toolbar;
      Toolbar newReviewToolbar = ViewBindings.findChildViewById(rootView, id);
      if (newReviewToolbar == null) {
        break missingId;
      }

      id = R.id.new_review_view;
      TextView newReviewView = ViewBindings.findChildViewById(rootView, id);
      if (newReviewView == null) {
        break missingId;
      }

      return new NewReviewLayoutBinding((ConstraintLayout) rootView, newReviewBackButton,
          newReviewBandName, newReviewGenre, newReviewLayout, newReviewLink, newReviewSave,
          newReviewSongName, newReviewSongRatingBar, newReviewText, newReviewTitle,
          newReviewToolbar, newReviewView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
